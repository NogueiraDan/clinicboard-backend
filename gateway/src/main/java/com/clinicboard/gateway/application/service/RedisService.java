package com.clinicboard.gateway.application.service;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.data.redis.core.ReactiveRedisTemplate;
import org.springframework.stereotype.Service;
import reactor.core.publisher.Mono;

import com.clinicboard.gateway.model.UserInfo;

import java.time.Duration;

/**
 * Servi√ßo respons√°vel pelo cache de informa√ß√µes de usu√°rios no Redis.
 * 
 * Este servi√ßo implementa uma estrat√©gia de cache para otimizar a performance
 * do Gateway, evitando revalida√ß√£o desnecess√°ria de JWTs para o mesmo usu√°rio.
 * 
 * Arquitetura:
 * - Cache Key: "user_info:{hash_do_token}"
 * - TTL: Configur√°vel via application.properties
 * - Invalida√ß√£o autom√°tica: Por expira√ß√£o ou manual
 */
@Service
public class RedisService {

    // Template reativo do Redis para opera√ß√µes ass√≠ncronas
    private final ReactiveRedisTemplate<String, UserInfo> redisTemplate;

    // Time To Live (TTL) em segundos - tempo que os dados ficam no cache
    private final long userInfoTtl;

    /**
     * Construtor que injeta depend√™ncias do Redis e configura√ß√£o de TTL.
     * 
     * @param redisTemplate Template reativo para opera√ß√µes Redis
     * @param userInfoTtl   TTL em segundos (padr√£o: 3600s = 1 hora)
     */
    public RedisService(
            ReactiveRedisTemplate<String, UserInfo> redisTemplate,
            @Value("${app.cache.user-info.ttl:3600}") long userInfoTtl) {
        this.redisTemplate = redisTemplate;
        this.userInfoTtl = userInfoTtl;
    }

    /**
     * Busca informa√ß√µes do usu√°rio no cache usando o token JWT como chave.
     * 
     * Fluxo:
     * 1. Gera chave de cache a partir do hash do token
     * 2. Busca no Redis de forma ass√≠ncrona
     * 3. Filtra apenas dados n√£o expirados
     * 4. Log de sucesso/erro para observabilidade
     * 
     * @param token JWT do usu√°rio
     * @return Mono<UserInfo> - Dados do usu√°rio se encontrados e v√°lidos, empty()
     *         se n√£o
     */
    public Mono<UserInfo> getUserFromCache(String token) {
        // Gera chave √∫nica baseada no hash do token (seguran√ßa + performance)
        String cacheKey = generateCacheKey(token);

        return redisTemplate.opsForValue()
                .get(cacheKey) // Busca ass√≠ncrona no Redis
                // Filtra apenas se os dados ainda est√£o v√°lidos (n√£o expirados)
                .filter(userInfo -> !userInfo.isExpired(userInfoTtl))
                // Log para debugging - mostra quando cache foi usado
                .doOnNext(userInfo -> System.out.println("‚úÖ Cache HIT para usu√°rio: " + userInfo.getEmail()))
                // Log de erros de conex√£o com Redis
                .doOnError(error -> System.err.println("‚ùå Erro ao acessar cache: " + error.getMessage()));
    }

    /**
     * Armazena informa√ß√µes do usu√°rio no cache com TTL configurado.
     * 
     * Fluxo:
     * 1. Gera chave de cache
     * 2. Armazena no Redis com TTL autom√°tico
     * 3. Log de confirma√ß√£o
     * 4. Retorna o UserInfo para continuar o fluxo
     * 
     * @param token    JWT do usu√°rio
     * @param userInfo Dados do usu√°rio para cachear
     * @return Mono<UserInfo> - Mesmos dados passados, para encadeamento
     */
    public Mono<UserInfo> cacheUser(String token, UserInfo userInfo) {
        // Gera chave √∫nica para este usu√°rio/token
        String cacheKey = generateCacheKey(token);

        return redisTemplate.opsForValue()
                // Armazena com TTL - Redis remove automaticamente ap√≥s expirar
                .set(cacheKey, userInfo, Duration.ofSeconds(userInfoTtl))
                // Log para confirmar que dados foram armazenados
                .doOnSuccess(success -> System.out.println("üíæ Cache STORE para usu√°rio: " + userInfo.getEmail()))
                // Log de erros de conex√£o/armazenamento
                .doOnError(error -> System.err.println("‚ùå Erro ao armazenar cache: " + error.getMessage()))
                // Retorna o UserInfo original para continuar o fluxo reativo
                .thenReturn(userInfo);
    }

    /**
     * Remove manualmente os dados do usu√°rio do cache.
     * 
     * √ötil para:
     * - Logout do usu√°rio
     * - Altera√ß√£o de permiss√µes
     * - Invalida√ß√£o de token comprometido
     * 
     * @param token JWT do usu√°rio para invalidar
     * @return Mono<Boolean> - true se removido com sucesso, false se n√£o existia
     */
    public Mono<Boolean> invalidateUserCache(String token) {
        // Gera a mesma chave usada para armazenar
        String cacheKey = generateCacheKey(token);

        return redisTemplate.delete(cacheKey)
                // Converte n√∫mero de itens deletados para boolean
                .map(deletedCount -> deletedCount > 0)
                // Log para confirmar invalida√ß√£o
                .doOnNext(deleted -> System.out.println("üóëÔ∏è Cache INVALIDATED: " + deleted));
    }

    /**
     * Gera chave √∫nica para o cache baseada no hash do token.
     * 
     * Estrat√©gia de seguran√ßa:
     * - N√£o armazena o token JWT completo no Redis
     * - Usa hash do token como identificador √∫nico
     * - Prefixo "user_info:" para organiza√ß√£o e evitar colis√µes
     * 
     * Exemplo: "user_info:123456789" onde 123456789 √© token.hashCode()
     * 
     * @param token JWT completo
     * @return String chave √∫nica para o Redis
     */
    private String generateCacheKey(String token) {
        // Usa hash do token para evitar armazenar token completo (seguran√ßa)
        // + prefixo para organizar namespace no Redis
        return "user_info:" + token.hashCode();
    }
}